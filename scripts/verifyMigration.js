/**
 * verifyMigration.js
 *
 * Script pentru verificarea migra»õiei complete
 * VerificƒÉ cƒÉ TOATE documentele au c√¢mpul subjectId
 *
 * RULARE: node scripts/verifyMigration.js
 */

import { db } from '../src/services/firebase.js';
import { collection, getDocs, query, where } from 'firebase/firestore';

/**
 * Func»õia principalƒÉ de verificare
 */
async function verifyMigration() {
  console.log('üîç Pornire verificare migra»õie...\n');

  try {
    // 1. VerificƒÉ SUBJECTS collection
    console.log('üìö Verificare colec»õie SUBJECTS:');
    const subjectsRef = collection(db, 'subjects');
    const subjectsSnapshot = await getDocs(subjectsRef);

    console.log(`   ‚úÖ GƒÉsite ${subjectsSnapshot.size} materii`);
    subjectsSnapshot.docs.forEach(doc => {
      const data = doc.data();
      console.log(`      - ${data.name} (${doc.id}) ${data.isPublished ? '‚úÖ' : 'üìù'}`);
    });
    console.log('');

    // 2. VerificƒÉ THEMES collection
    console.log('üé® Verificare colec»õie THEMES:');
    const themesRef = collection(db, 'themes');
    const themesSnapshot = await getDocs(themesRef);

    const themesWithoutSubject = themesSnapshot.docs.filter(
      doc => !doc.data().subjectId
    );

    console.log(`   üìä Total teme:                ${themesSnapshot.size}`);
    console.log(`   ‚úÖ Cu subjectId:              ${themesSnapshot.size - themesWithoutSubject.length}`);
    console.log(`   ‚ùå FƒÉrƒÉ subjectId:            ${themesWithoutSubject.length}`);

    if (themesWithoutSubject.length > 0) {
      console.log('\n   ‚ö†Ô∏è  Teme fƒÉrƒÉ subjectId:');
      themesWithoutSubject.forEach(doc => {
        const data = doc.data();
        console.log(`      - ${data.name || doc.id}`);
      });
    }
    console.log('');

    // 3. VerificƒÉ QUESTIONS collection
    console.log('‚ùì Verificare colec»õie QUESTIONS:');
    const questionsRef = collection(db, 'questions');
    const questionsSnapshot = await getDocs(questionsRef);

    const questionsWithoutSubject = questionsSnapshot.docs.filter(
      doc => !doc.data().subjectId
    );

    console.log(`   üìä Total √ÆntrebƒÉri:           ${questionsSnapshot.size}`);
    console.log(`   ‚úÖ Cu subjectId:              ${questionsSnapshot.size - questionsWithoutSubject.length}`);
    console.log(`   ‚ùå FƒÉrƒÉ subjectId:            ${questionsWithoutSubject.length}`);

    if (questionsWithoutSubject.length > 0) {
      console.log('\n   ‚ö†Ô∏è  √éntrebƒÉri fƒÉrƒÉ subjectId (primele 10):');
      questionsWithoutSubject.slice(0, 10).forEach(doc => {
        const data = doc.data();
        console.log(`      - Theme: ${data.themeId}, ID: ${doc.id.substring(0, 8)}...`);
      });
      if (questionsWithoutSubject.length > 10) {
        console.log(`      ... »ôi √ÆncƒÉ ${questionsWithoutSubject.length - 10} √ÆntrebƒÉri`);
      }
    }
    console.log('');

    // 4. VerificƒÉ breakdown per subject
    console.log('üìä Breakdown per materie:');

    // Themes by subject
    const themesBySubject = {};
    themesSnapshot.docs.forEach(doc => {
      const subjectId = doc.data().subjectId || 'undefined';
      themesBySubject[subjectId] = (themesBySubject[subjectId] || 0) + 1;
    });

    // Questions by subject
    const questionsBySubject = {};
    questionsSnapshot.docs.forEach(doc => {
      const subjectId = doc.data().subjectId || 'undefined';
      questionsBySubject[subjectId] = (questionsBySubject[subjectId] || 0) + 1;
    });

    Object.keys(themesBySubject).forEach(subjectId => {
      console.log(`   ${subjectId}:`);
      console.log(`      - Teme: ${themesBySubject[subjectId]}`);
      console.log(`      - √éntrebƒÉri: ${questionsBySubject[subjectId] || 0}`);
    });
    console.log('');

    // 5. Raport final
    console.log('='.repeat(60));
    console.log('üéØ RAPORT FINAL');
    console.log('='.repeat(60));

    const allMigrated =
      themesWithoutSubject.length === 0 &&
      questionsWithoutSubject.length === 0;

    if (allMigrated) {
      console.log('‚úÖ MIGRARE 100% COMPLETƒÇ!');
      console.log('');
      console.log('   üìö Subjects:   ‚úÖ ' + subjectsSnapshot.size + ' materii create');
      console.log('   üé® Themes:     ‚úÖ ' + themesSnapshot.size + ' teme migrate');
      console.log('   ‚ùì Questions:  ‚úÖ ' + questionsSnapshot.size + ' √ÆntrebƒÉri migrate');
      console.log('');
      console.log('‚û°Ô∏è  URMƒÇTORUL PAS: ActualizeazƒÉ codul React');
      console.log('   - Update App.jsx cu nested routes');
      console.log('   - CreeazƒÉ SubjectSelection page');
      console.log('   - Update ThemeSelection pentru subjectSlug');
      console.log('');
      console.log('‚ö†Ô∏è  NU UITA: Revert Firebase Security Rules la versiunea securizatƒÉ!');
    } else {
      console.log('‚ö†Ô∏è  MIGRARE INCOMPLETƒÇ!');
      console.log('');
      console.log('   RuleazƒÉ din nou scripturile de migrare:');
      if (themesWithoutSubject.length > 0) {
        console.log('   - node scripts/migrateThemesToSubjects.js');
      }
      if (questionsWithoutSubject.length > 0) {
        console.log('   - node scripts/migrateQuestionsToSubjects.js');
      }
    }

    console.log('='.repeat(60) + '\n');

    process.exit(allMigrated ? 0 : 1);

  } catch (error) {
    console.error('\n‚ùå EROARE la verificare:', error);
    console.error('Stack:', error.stack);
    process.exit(1);
  }
}

// RuleazƒÉ func»õia
verifyMigration();
